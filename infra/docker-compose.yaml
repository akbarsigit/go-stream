version: "3.8"
services:
  caddy:
    container_name: caddy
    image: caddy:latest
    restart: unless-stopped
    ports:
      - "80:80"
      - "443:443"
      - "443:443/udp"
    volumes:
      - ./caddy/config/Caddyfile:/etc/caddy/Caddyfile
      - ./caddy/data:/data
      - ./caddy/config:/config
    networks:
      - app-tier

  # administrator
  portainer:
    container_name: portainer
    image: portainer/portainer-ce:latest
    restart: unless-stopped
    ports:
      - "9000:9000"
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock
      - ./portainer_data:/data
    networks:
      - app-tier

  zookeeper:
    container_name: zookeeper
    image: 'bitnami/zookeeper:latest'
    restart: unless-stopped
    ports:
      - '2181:2181'
    environment:
      - ALLOW_ANONYMOUS_LOGIN=yes
    volumes:
      - ./zookeeper_data:/bitnami/zookeeper
    networks:
      - app-tier
  
  # kafka_manager:
  #   container_name: kafka_manager
  #   image: 'hlebalbau/kafka-manager:latest'
  #   restart: unless-stopped
  #   ports:
  #     - '9004:9004'
  #   environment:
  #     - ZK_HOSTS=zookeeper:2181
  #   networks:
  #     - app-tier
  #   depends_on:
  #     - zookeeper
  #     - kafka

  kafkadrop:
    container_name: kafkadrop
    image: 'obsidiandynamics/kafdrop:latest'
    restart: unless-stopped
    ports:
      - '9005:9005'
    environment:
      - KAFKA_BROKERCONNECT=kafka:9092
      - MANAGEMENT_SERVER_PORT=9005
      - SERVER_PORT=9005
    networks:
      - app-tier
    depends_on:
      - kafka

  kafka:
    container_name: kafka
    image: 'bitnami/kafka:latest'
    restart: unless-stopped
    ports:
      - '9093:9093'
    expose:
      - "9093"
    environment:
      - KAFKA_CFG_ZOOKEEPER_CONNECT=zookeeper:2181
      - ALLOW_PLAINTEXT_LISTENER=yes
      - KAFKA_CREATE_TOPICS="kafka_capstone_event_bus:1:1"
      - KAFKA_CFG_AUTO_CREATE_TOPICS_ENABLE=true
      - KAFKA_CFG_LISTENER_SECURITY_PROTOCOL_MAP=CLIENT:PLAINTEXT,EXTERNAL:PLAINTEXT
      - KAFKA_CFG_LISTENERS=CLIENT://:9092,EXTERNAL://:9093
      - KAFKA_CFG_ADVERTISED_LISTENERS=CLIENT://kafka:9092,EXTERNAL://127.0.0.1:9093
      - KAFKA_INTER_BROKER_LISTENER_NAME=CLIENT
    depends_on:
      - zookeeper
    volumes:
      - ./kafka_data:/bitnami/kafka
    networks:
      - app-tier

  node-exporter:
    container_name: node-exporter
    image: prom/node-exporter:latest
    restart: unless-stopped
    ports:
      - "9100:9100"
    networks:
      - app-tier
  
  prometheus:
    container_name: prometheus
    image: prom/prometheus:latest
    restart: unless-stopped
    command:
      - "--config.file=/etc/prometheus/prometheus.yaml"
    ports:
      - "9090:9090"
    volumes:
      - ./prometheus/config/prometheus.yaml:/etc/prometheus/prometheus.yaml:ro
      - ./prometheus/data:/prometheus
    networks:
      - app-tier

  minio-loki:
    container_name: minio-loki
    hostname: minio-loki
    image: minio/minio:latest
    entrypoint:
      - sh
      - -euc
      - |
        mkdir -p /data/loki-data && \
        minio server --console-address ":9006" /data
    restart: unless-stopped
    ports:
      - "9006:9006"
    environment:
      MINIO_ACCESS_KEY: admin
      MINIO_SECRET_KEY: administrator
      MINIO_PROMETHEUS_AUTH_TYPE: public
      MINIO_PROMETHEUS_URL: http://prometheus:9090
      MINIO_PROMETHEUS_JOB_ID: minio-loki
      MINIO_UPDATE: off
    volumes:
      - ./loki/s3:/data
    networks:
      - app-tier

  loki:
    container_name: loki
    image: grafana/loki:latest
    restart: unless-stopped
    ports:
      - "3100:3100"
    volumes:
      - ./loki/config/loki.yaml:/etc/loki/config.yaml
      - ./loki/data:/data
    depends_on:
      - minio-loki
    networks:
      - app-tier

  promtail:
    container_name: promtail
    image: grafana/promtail:latest
    command: "-config.file=/etc/promtail/config.yaml"
    volumes:
      - ./loki/config/promtail.yaml:/etc/promtail/config.yaml:ro
      - /var/run/docker.sock:/var/run/docker.sock
    depends_on:
      - loki

  srs:
    container_name: srs
    image: ossrs/srs:latest
    command: "./objs/srs -c conf/docker.conf"
    ports:
      - "1935:1935"
      - "1985:1985"
      - "8080:8080"

  flog:
    container_name: flog
    image: mingrammer/flog
    command: "-f json -d 0.5s -l"

  grafana:
    container_name: grafana
    image: grafana/grafana:latest
    environment:
      - GF_PATHS_PROVISIONING=/etc/grafana/provisioning
      - GF_AUTH_ANONYMOUS_ENABLED=true
      - GF_AUTH_ANONYMOUS_ORG_ROLE=Admin
    ports:
      - "3000:3000"
    volumes:
      - ./grafana/data:/var/lib/grafana
      - ./grafana/config/provisioning:/etc/grafana/provisioning
    depends_on:
      - prometheus
  
  pg:
    image: 'postgres:15-alpine'
    container_name: postgres
    restart : unless-stopped    
    ports:
      - "5432:5432"
    environment: 
        - DATABASE_HOST=127.0.0.1
        - POSTGRES_USER=postgres
        - POSTGRES_PASSWORD=pgpass
        - POSTGRES_DB=postgres  
    volumes:
      - ./pgdata:/var/lib/postgresql/data  
      - ./docker_postgres_init.sql:/docker-entrypoint-initdb.d/docker_postgres_init.sql
    networks:
      - app-tier

volumes:
  portainer_data:
  kafka_data:
  zookeeper_data:
  loki:
  pgdata:

networks:
  app-tier:
    driver: bridge

